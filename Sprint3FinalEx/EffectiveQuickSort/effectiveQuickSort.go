/*
-- –ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´ --
id –≤ –∫–æ–Ω—Ç–µ—Å—Ç–µ 58675957

–ü—Ä–∏–≤–µ—Ç) –°—Ä–∞–∑—É –Ω–∞–ø–∏—à—É, —á—Ç–æ —ç—Ç–æ –Ω–µ —è –ø—Ä–∏–¥—É–º–∞–ª) –ì–¥–µ-—Ç–æ —Å –ø–æ–ª –≥–æ–¥–∞ –Ω–∞–∑–∞–¥ —è —á–∏—Ç–∞–ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–ª —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
–≤–æ—Ç —ç—Ç—É —Å—Ç–∞—Ç—å—é https://yourbasic.org/golang/quicksort-optimizations/ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≤–µ—Å—å –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ—Ç—Å—é–¥–∞, –Ω–æ —è –ø–µ—Ä–µ—Å–∫–∞–∂—É:
–ë–µ—Ä–µ—Ç—Å—è –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –¥–ª—è –µ–≥–æ –¥–ª–∏–Ω–Ω—ã –Ω–µ –∏–º–µ–µ—Ç –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ —Å–º—ã—Å–ª–∞ –¥–µ–ª–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é partition, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏,
—è –≤–∑—è–ª –¥–ª–∏–Ω—É –º–µ–Ω—å—à–µ 6, –Ω–µ –∑–Ω–∞—é –ø–æ—á–µ–º—É, –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫) –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –±–æ–ª—å—à–µ, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è pivot —Å –ø–æ–º–æ—â—å—é 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–¥–æ–º–Ω–æ -
–≤ —Å—Ç–∞—Ç—å–µ –≥–æ–≤–æ—Ä–∏—Ç—Å—è (–Ω—É –∏ –≤ —ç—Ç–æ–º –µ—Å—Ç—å —Å–º—ã—Å–ª, –ø–æ-–º–æ–µ–º—É), —á—Ç–æ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –≤—ã–±–∏—Ä–∞—Ç—å 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞, —Å–µ—Ä–µ–¥–∏–Ω—ã
–∏ –∫–æ–Ω—Ü–∞, –∏ –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–µ–¥–∏–Ω–∏—Ç—å 2 —ç—Ç–∏ –∏–¥–µ–∏. –ü–æ—Ç–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ partiton –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —Å–∞–º –º–∞—Å—Å–∏–≤, –∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥ –∏–Ω–¥–µ–∫—Å–æ–º pivot'a. –°—É—Ç—å –≤ —Ç–æ–º, —á—Ç–æ–±—ã
–ø–æ–ª—É—á–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –∏, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –µ–≥–æ —Å pivot'–æ–º, –∫–ª–∞—Å—Ç—å –µ–≥–æ –ª–∏–±–æ –≤–ª–µ–≤–æ, –ª–∏–±–æ –≤–ø—Ä–∞–≤–æ, –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è mid –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è pivot –º–µ–∂–¥—É –º–µ–Ω—å—à–∏–º–∏ –∏ –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
–ü–æ—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–¥–∞–µ—Ç 2 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ low –∏ high. low - —ç—Ç–æ —Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—å—à–µ pivot, high - —ç—Ç–æ —Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—à–µ.
–†–∞–∑—Ä–µ–∑–∞–≤ —Å–ª–∞–π—Å —Å –ø–æ–º–æ—â—å—é —ç—Ç–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤, –º—ã –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Ä–µ–∫—É—Ä—Å–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤—ã—à–µ –∏ –Ω–∏–∂–µ, –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã–µ (—É –Ω–∞—Å –æ–Ω–æ –æ–¥–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã) –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –Ω–µ —É—á–∞—Å—Ç–≤—É—é—Ç. –î–ª—è —Ä–∞–±–æ—Ç—ã —è —Å–æ–∑–¥–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É CompetitionResult –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∂–¥–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –∏ CompetitionData - —Å–ª–∞–π—Å, –∫–æ—Ç–æ—Ä—ã–π
—á–∞—Å—Ç–∏—á–Ω–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É sort.Interface, —É –Ω–µ–≥–æ –µ—Å—Ç—å Less –∏ Swap, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–æ–≥–æ –≥–¥–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–∞–ª–µ–µ –ø–æ –∫–æ–¥—É)



-- –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò --

–í—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–æ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å —ç—Ç–∏–º —Ä–∞–∑–¥–µ–ª–æ–º, —è –≤—Å–µ –µ—â–µ –ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—É—Ç –Ω–∞–¥–æ –ø–∏—Å–∞—Ç—å)
–ò–∑ –∑–∞–¥–∞–Ω–∏—è —Å–ª–µ–¥—É–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±—ã—Å—Ç—Ä—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø –ø–∞–º—è—Ç–∏, –≤—Å–µ —ç—Ç–æ —Ç—É—Ç –µ—Å—Ç—å, –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ partiton –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ –∏–Ω–¥–µ–∫—Å—É, –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ
–º–∞—Å—Å–∏–≤–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç, –∞ —Å–∞–º –∞–ª–≥–æ—Ä–∏—Ç–º —ç—Ç–æ –∏ –µ—Å—Ç—å –±—ã—Å—Ç—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è)



-- –í–†–ï–ú–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ --

–≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(n^2) –µ—Å–ª–∏ pivot –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø–ª–æ—Ö–æ –≤ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–∏, –≤ —Å—Ä–µ–¥–Ω–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(log n * n) –≥–¥–µ log n —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫—É—Ä—Å–∏–π, –∞ n —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã–µ
–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –º–∞—Å—Å–∏–≤–æ–º (–Ω–∞–¥–µ—é—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–∏—Å–∞–ª)

-- –ü–†–û–°–¢–†–ê–ù–°–¢–í–ï–ù–ù–ê–Ø –°–õ–û–ñ–ù–û–°–¢–¨ --

–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–µ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç O(1)


== –∑—ã ==
–∏–∑-–∑–∞ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–∫–æ–ª–æ–≤ –≤ –∂–∏–∑–Ω–∏ –∏ —Å–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ —è –æ–ø–∞–∑–¥—ã–≤–∞—é –∫ –∂–µ—Å—Ç–∫–æ–º—É –¥–µ–¥–ª–∞–π–Ω—É, —è –æ—Ç—Å—ã–ª–∞—é —ç—Ç–æ 20 —á–∏—Å–ª–∞, –∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è 4–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–æ —Å–¥–∞—Ç—å —É–∂–µ 28, –µ—Å—Ç—å —à–∞–Ω—Å —Ç–æ–≥–æ
—á—Ç–æ —è –æ—Å—Ç–∞–Ω—É—Å—å –Ω–∞ "–≤—Ç–æ—Ä–æ–π –≥–æ–¥" :D —è –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞—é –º–µ–Ω—è—é—Ç—Å—è –ª–∏ —Ä–µ–≤—å—é–µ—Ä—ã, –Ω–æ –µ—Å–ª–∏ –º–µ–Ω—è—é—Ç—Å—è, —Ç–æ —Å–ø–∞—Å–∏–±–æ –≤–∞–º –±–æ–ª—å—à–æ–µ! –ö–∞–∫ –º–∏–Ω–∏–º—É–º—É –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–∞–º —è —É–∑–Ω–∞–ª —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–∫–∏ —ç—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–æ,
–∏ –Ω–∞—á–∞–ª –¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ, –∫—Å—Ç–∞—Ç–∏, –∏–¥—É—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º üòé
*/

package effectivequicksort

import (
	"bufio"
	"io"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

type CompetitionResult struct {
	name       string
	completeEx int
	penalty    int
}

// –∏—Å–ø–ª—å–∑–æ–≤–∞–ª –ø–æ–¥—Ö–æ–¥ –∫–∞–∫ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ sort.Interface

type CompetitionData []CompetitionResult

func (cd CompetitionData) Less(a, b int) bool {
	if cd[a].completeEx == cd[b].completeEx {
		if cd[a].penalty == cd[b].penalty {
			return compareStings(cd[a].name, cd[b].name)
		} else {
			return cd[a].penalty < cd[b].penalty
		}
	} else {
		return cd[a].completeEx > cd[b].completeEx
	}
}

func (cd CompetitionData) Swap(a, b int) {
	cd[a], cd[b] = cd[b], cd[a]
}

func EffectiveQUickSort(r io.Reader, w io.Writer) {
	rand.Seed(time.Now().Unix())
	reader := bufio.NewReader(r)
	scaner := bufio.NewScanner(reader)
	scaner.Scan()
	// n, –∫—Å—Ç–∞—Ç–∏, –±—ã–ª –±—ã –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –±—ã –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∫–∞–∫–∏—Ö-—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–Ω–µ –∏—Å–ø–æ—Ä—Ç–∏–ª–∏ –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É)
	// –Ω–∞–ø—Ä–∏–º–µ—Ä https://puu.sh/Iqc6I/973aeb904a.png
	n, _ := strconv.Atoi(scaner.Text())
	competitionData := make(CompetitionData, 0)
	for i := 0; i < n; i++ {
		scaner.Scan()
		stringData := strings.Fields(scaner.Text())
		completeEx, _ := strconv.Atoi(stringData[1])
		penalty, _ := strconv.Atoi(stringData[2])
		competitionResult := CompetitionResult{
			stringData[0], completeEx, penalty,
		}
		competitionData = append(competitionData, competitionResult)
	}
	quickSort(competitionData)
	writer := bufio.NewWriter(w)
	for _, v := range competitionData {
		writer.WriteString(v.name)
		writer.WriteByte('\n')
	}
	writer.Flush()
}

func partition(d CompetitionData, pivot CompetitionResult) (low, high int) {
	low, mid, high := 0, 0, len(d)
	for mid < high {
		if d[mid] == pivot {
			mid++
			continue
		}
		if compareResultsHelper(d[mid], pivot) {
			d.Swap(mid, low)
			low++
			mid++
		} else {
			d.Swap(mid, high-1)
			high--

		}
	}
	return
}

func quickSort(d CompetitionData) {
	if len(d) < 6 {
		insertionSort(d)
		return
	}
	p := pivot(d)
	low, high := partition(d, d[p])
	quickSort(d[:low])
	quickSort(d[high:])

}

func pivot(d CompetitionData) int {
	return median(d, rand.Intn(len(d)), rand.Intn(len(d)), rand.Intn(len(d)))
}

func median(d CompetitionData, a, b, c int) int {
	if d.Less(a, b) {
		if d.Less(b, c) {
			return b
		}
		if d.Less(c, a) {
			return a
		}
		return c
	}
	if d.Less(c, b) {
		return b
	}
	if d.Less(c, a) {
		return c
	}
	return a
}

func insertionSort(d CompetitionData) {
	for i := 1; i < len(d); i++ {
		for g := i; g > 0 && d.Less(g, g-1); g-- {
			d.Swap(g, g-1)
		}
	}
}

// —Ç–∞–∫ –∫–∞–∫ pivot –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –µ–≥–æ —Å –¥—Ä—É–≥–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞, —è —Å–¥–µ–ª–∞–ª –≤–æ—Ç —Ç–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é
func compareResultsHelper(a, b CompetitionResult) bool {
	customCompetitonData := CompetitionData{a, b}
	return customCompetitonData.Less(0, 1)
}

//–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —è —Å—Ä–∞–≤–Ω–∏–≤–∞–ª –ø–µ—Ä–≤—ã–µ –±–∏—Ç—ã –Ω–∏–∫–Ω–µ–π–º–æ–≤, –Ω–æ –ø–æ—Ç–æ–º –ø–æ–Ω—è–ª, —á—Ç–æ –æ–Ω–∏ —Ä–∞–∑–ª–∏—á–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∏ –≥–ª—É–±–∂–µ, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–ª –≤–æ—Ç —ç—Ç–æ
func compareStings(s1, s2 string) bool {
	minLenght := 0
	if len(s1) > len(s2) {
		minLenght = len(s2)
	} else {
		minLenght = len(s1)
	}
	i, sum1, sum2 := 0, 0, 0
	for i < minLenght && sum1 == sum2 {
		sum1 += int(s1[i])
		sum2 += int(s2[i])
		i++
	}
	return sum1 < sum2
}

func main() {
	EffectiveQUickSort(os.Stdin, os.Stdout)
}
